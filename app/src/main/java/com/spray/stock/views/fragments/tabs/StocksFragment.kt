package com.spray.stock.views.fragments.tabsimport android.annotation.SuppressLintimport android.os.Bundleimport android.util.Logimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.widget.ProgressBarimport androidx.annotation.Nullableimport androidx.appcompat.content.res.AppCompatResourcesimport androidx.fragment.app.Fragmentimport androidx.fragment.app.viewModelsimport androidx.lifecycle.LiveDataimport androidx.lifecycle.Observerimport androidx.lifecycle.ViewModelProvidersimport androidx.recyclerview.widget.DividerItemDecorationimport androidx.recyclerview.widget.LinearLayoutManagerimport androidx.recyclerview.widget.RecyclerViewimport androidx.swiperefreshlayout.widget.SwipeRefreshLayoutimport com.spray.stock.Rimport com.spray.stock.adapters.ReportAdapterimport com.spray.stock.databinding.FragmentStocksBindingimport com.spray.stock.viewModels.Statusimport com.spray.stock.viewModels.items.ReportViewModelimport dagger.hilt.android.AndroidEntryPoint@AndroidEntryPointclass StocksFragment : Fragment(), SwipeRefreshLayout.OnRefreshListener {    private var mBinding: FragmentStocksBinding? = null    private lateinit var mRecyclerView: RecyclerView    private lateinit var mAdapter: ReportAdapter    private lateinit var mLayoutManager: LinearLayoutManager    private lateinit var mSwipeRefreshLayout: SwipeRefreshLayout    private lateinit var mProgressBar: ProgressBar    private val mViewModel: ReportViewModel by viewModels()    private var mLoading: Boolean = false    private var mPage = 0    private var mTotalPage = 0    override fun onCreateView(        inflater: LayoutInflater, container: ViewGroup?,        savedInstanceState: Bundle?    ): View? {        mBinding = FragmentStocksBinding.inflate(inflater, container, false)        mRecyclerView = mBinding?.rvReportStock!!        mSwipeRefreshLayout = mBinding?.spReportStock!!        mBinding?.svReportStock?.isNestedScrollingEnabled = false        return mBinding?.root!!    }    @SuppressLint("UseRequireInsteadOfGet")    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        super.onViewCreated(view, savedInstanceState)        mProgressBar = mBinding?.pbReportStock!!        mLayoutManager = LinearLayoutManager(context, LinearLayoutManager.VERTICAL, false)        mSwipeRefreshLayout.setOnRefreshListener(this)        mAdapter = context?.let { ReportAdapter(it) }!!        with(mRecyclerView) {            layoutManager = mLayoutManager            adapter = mAdapter        }        // 목록에서 각 Content 영역 하단에 구분되는 gray bottom bar 그리는 부분        val dividerItemDecoration = DividerItemDecoration(this.context, DividerItemDecoration.VERTICAL)        dividerItemDecoration.setDrawable(this.context?.let {            AppCompatResources.getDrawable(it, R.drawable.recyclerview_divider_line)        }!!)        mRecyclerView.addItemDecoration(dividerItemDecoration)        getReports(false)        mRecyclerView.addOnScrollListener(object : RecyclerView.OnScrollListener() {            override fun onScrolled(recyclerView: RecyclerView, dx: Int, dy: Int) {                val visibleItemCount = mLayoutManager.childCount                val pastVisibleItem = mLayoutManager.findFirstVisibleItemPosition()                val total = mAdapter.itemCount                if (!mLoading && mPage < mTotalPage) {                    if (visibleItemCount + pastVisibleItem >= total && total >= 20) {                        mPage++                        getReports(false)                    }                }                super.onScrolled(recyclerView, dx, dy)            }        })    }    override fun onActivityCreated(savedInstanceState: Bundle?) {        super.onActivityCreated(savedInstanceState)//        val viewModel = ViewModelProviders.of(requireActivity()).get(ReportViewModel::class.java)//        val liveData = viewModel.loadReports("STOCKS", mPage)//        val lifecycleOwner = viewLifecycleOwner//        liveData.observe(lifecycleOwner, object : Observer<String?> {//            override fun onChanged(s: String?) {//                Log.d("debugger2", "observer hash: " + this.hashCode())//            }//        })        mViewModel.loadReports("STOCKS", "", mPage).observe(viewLifecycleOwner, { networkResource ->            when (networkResource.status) {                Status.LOADING -> {                }                Status.SUCCESS -> {                    mTotalPage = networkResource.data?.body()?.totalElements!!                    val listResponse = networkResource.data.body()?.content                    mAdapter.submitList(listResponse?.toMutableList())                    mProgressBar.visibility = View.GONE                    mLoading = false                    mBinding?.spReportStock?.isRefreshing = false                }                Status.ERROR -> {                    mProgressBar.visibility = View.GONE                    mLoading = false                    mBinding?.spReportStock?.isRefreshing = false                }            }        })    }    private fun getReports(isRefresh: Boolean) {        mLoading = true        if (!isRefresh) mProgressBar.visibility = View.VISIBLE        mViewModel.loadReports("STOCKS", "", mPage).observe(viewLifecycleOwner, { resource ->            when (resource.status) {                Status.LOADING -> {                }                Status.SUCCESS -> {                    mTotalPage = resource.data?.body()?.totalElements!!                    val listResponse = resource.data.body()?.content                    mAdapter.submitList(listResponse?.toMutableList())                    mProgressBar.visibility = View.GONE                    mLoading = false                    mBinding?.spReportStock?.isRefreshing = false                }                Status.ERROR -> {                    mProgressBar.visibility = View.GONE                    mLoading = false                    mBinding?.spReportStock?.isRefreshing = false                }            }        })    }    override fun onRefresh() {        mAdapter.clear()        mPage = 0        getReports(true)    }    override fun onDestroyView() {        mBinding = null        super.onDestroyView()    }}